// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prof_dag.proto

#ifndef PROTOBUF_INCLUDED_prof_5fdag_2eproto
#define PROTOBUF_INCLUDED_prof_5fdag_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_prof_5fdag_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_prof_5fdag_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_prof_5fdag_2eproto();
namespace caffe2 {
class BlobProfile;
class BlobProfileDefaultTypeInternal;
extern BlobProfileDefaultTypeInternal _BlobProfile_default_instance_;
class ProfDAGProto;
class ProfDAGProtoDefaultTypeInternal;
extern ProfDAGProtoDefaultTypeInternal _ProfDAGProto_default_instance_;
class ProfDAGProtos;
class ProfDAGProtosDefaultTypeInternal;
extern ProfDAGProtosDefaultTypeInternal _ProfDAGProtos_default_instance_;
class TwoNumberStatsProto;
class TwoNumberStatsProtoDefaultTypeInternal;
extern TwoNumberStatsProtoDefaultTypeInternal _TwoNumberStatsProto_default_instance_;
}  // namespace caffe2
namespace google {
namespace protobuf {
template<> ::caffe2::BlobProfile* Arena::CreateMaybeMessage<::caffe2::BlobProfile>(Arena*);
template<> ::caffe2::ProfDAGProto* Arena::CreateMaybeMessage<::caffe2::ProfDAGProto>(Arena*);
template<> ::caffe2::ProfDAGProtos* Arena::CreateMaybeMessage<::caffe2::ProfDAGProtos>(Arena*);
template<> ::caffe2::TwoNumberStatsProto* Arena::CreateMaybeMessage<::caffe2::TwoNumberStatsProto>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace caffe2 {

// ===================================================================

class TwoNumberStatsProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe2.TwoNumberStatsProto) */ {
 public:
  TwoNumberStatsProto();
  virtual ~TwoNumberStatsProto();

  TwoNumberStatsProto(const TwoNumberStatsProto& from);

  inline TwoNumberStatsProto& operator=(const TwoNumberStatsProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TwoNumberStatsProto(TwoNumberStatsProto&& from) noexcept
    : TwoNumberStatsProto() {
    *this = ::std::move(from);
  }

  inline TwoNumberStatsProto& operator=(TwoNumberStatsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TwoNumberStatsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TwoNumberStatsProto* internal_default_instance() {
    return reinterpret_cast<const TwoNumberStatsProto*>(
               &_TwoNumberStatsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TwoNumberStatsProto* other);
  friend void swap(TwoNumberStatsProto& a, TwoNumberStatsProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TwoNumberStatsProto* New() const final {
    return CreateMaybeMessage<TwoNumberStatsProto>(nullptr);
  }

  TwoNumberStatsProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TwoNumberStatsProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TwoNumberStatsProto& from);
  void MergeFrom(const TwoNumberStatsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TwoNumberStatsProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float mean = 1;
  bool has_mean() const;
  void clear_mean();
  static const int kMeanFieldNumber = 1;
  float mean() const;
  void set_mean(float value);

  // optional float stddev = 2;
  bool has_stddev() const;
  void clear_stddev();
  static const int kStddevFieldNumber = 2;
  float stddev() const;
  void set_stddev(float value);

  // optional int64 count = 3;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:caffe2.TwoNumberStatsProto)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float mean_;
  float stddev_;
  ::google::protobuf::int64 count_;
  friend struct ::TableStruct_prof_5fdag_2eproto;
};
// -------------------------------------------------------------------

class BlobProfile final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe2.BlobProfile) */ {
 public:
  BlobProfile();
  virtual ~BlobProfile();

  BlobProfile(const BlobProfile& from);

  inline BlobProfile& operator=(const BlobProfile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BlobProfile(BlobProfile&& from) noexcept
    : BlobProfile() {
    *this = ::std::move(from);
  }

  inline BlobProfile& operator=(BlobProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BlobProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlobProfile* internal_default_instance() {
    return reinterpret_cast<const BlobProfile*>(
               &_BlobProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(BlobProfile* other);
  friend void swap(BlobProfile& a, BlobProfile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BlobProfile* New() const final {
    return CreateMaybeMessage<BlobProfile>(nullptr);
  }

  BlobProfile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BlobProfile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BlobProfile& from);
  void MergeFrom(const BlobProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlobProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .caffe2.TwoNumberStatsProto bytes_used = 3;
  bool has_bytes_used() const;
  void clear_bytes_used();
  static const int kBytesUsedFieldNumber = 3;
  const ::caffe2::TwoNumberStatsProto& bytes_used() const;
  ::caffe2::TwoNumberStatsProto* release_bytes_used();
  ::caffe2::TwoNumberStatsProto* mutable_bytes_used();
  void set_allocated_bytes_used(::caffe2::TwoNumberStatsProto* bytes_used);

  // @@protoc_insertion_point(class_scope:caffe2.BlobProfile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::caffe2::TwoNumberStatsProto* bytes_used_;
  friend struct ::TableStruct_prof_5fdag_2eproto;
};
// -------------------------------------------------------------------

class ProfDAGProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe2.ProfDAGProto) */ {
 public:
  ProfDAGProto();
  virtual ~ProfDAGProto();

  ProfDAGProto(const ProfDAGProto& from);

  inline ProfDAGProto& operator=(const ProfDAGProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProfDAGProto(ProfDAGProto&& from) noexcept
    : ProfDAGProto() {
    *this = ::std::move(from);
  }

  inline ProfDAGProto& operator=(ProfDAGProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProfDAGProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfDAGProto* internal_default_instance() {
    return reinterpret_cast<const ProfDAGProto*>(
               &_ProfDAGProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ProfDAGProto* other);
  friend void swap(ProfDAGProto& a, ProfDAGProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProfDAGProto* New() const final {
    return CreateMaybeMessage<ProfDAGProto>(nullptr);
  }

  ProfDAGProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProfDAGProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProfDAGProto& from);
  void MergeFrom(const ProfDAGProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfDAGProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe2.BlobProfile output_profile = 5;
  int output_profile_size() const;
  void clear_output_profile();
  static const int kOutputProfileFieldNumber = 5;
  ::caffe2::BlobProfile* mutable_output_profile(int index);
  ::google::protobuf::RepeatedPtrField< ::caffe2::BlobProfile >*
      mutable_output_profile();
  const ::caffe2::BlobProfile& output_profile(int index) const;
  ::caffe2::BlobProfile* add_output_profile();
  const ::google::protobuf::RepeatedPtrField< ::caffe2::BlobProfile >&
      output_profile() const;

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .caffe2.TwoNumberStatsProto execution_time = 4;
  bool has_execution_time() const;
  void clear_execution_time();
  static const int kExecutionTimeFieldNumber = 4;
  const ::caffe2::TwoNumberStatsProto& execution_time() const;
  ::caffe2::TwoNumberStatsProto* release_execution_time();
  ::caffe2::TwoNumberStatsProto* mutable_execution_time();
  void set_allocated_execution_time(::caffe2::TwoNumberStatsProto* execution_time);

  // required float mean = 2;
  bool has_mean() const;
  void clear_mean();
  static const int kMeanFieldNumber = 2;
  float mean() const;
  void set_mean(float value);

  // required float stddev = 3;
  bool has_stddev() const;
  void clear_stddev();
  static const int kStddevFieldNumber = 3;
  float stddev() const;
  void set_stddev(float value);

  // @@protoc_insertion_point(class_scope:caffe2.ProfDAGProto)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe2::BlobProfile > output_profile_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::caffe2::TwoNumberStatsProto* execution_time_;
  float mean_;
  float stddev_;
  friend struct ::TableStruct_prof_5fdag_2eproto;
};
// -------------------------------------------------------------------

class ProfDAGProtos final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:caffe2.ProfDAGProtos) */ {
 public:
  ProfDAGProtos();
  virtual ~ProfDAGProtos();

  ProfDAGProtos(const ProfDAGProtos& from);

  inline ProfDAGProtos& operator=(const ProfDAGProtos& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProfDAGProtos(ProfDAGProtos&& from) noexcept
    : ProfDAGProtos() {
    *this = ::std::move(from);
  }

  inline ProfDAGProtos& operator=(ProfDAGProtos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ProfDAGProtos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProfDAGProtos* internal_default_instance() {
    return reinterpret_cast<const ProfDAGProtos*>(
               &_ProfDAGProtos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ProfDAGProtos* other);
  friend void swap(ProfDAGProtos& a, ProfDAGProtos& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProfDAGProtos* New() const final {
    return CreateMaybeMessage<ProfDAGProtos>(nullptr);
  }

  ProfDAGProtos* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProfDAGProtos>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProfDAGProtos& from);
  void MergeFrom(const ProfDAGProtos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProfDAGProtos* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .caffe2.ProfDAGProto stats = 1;
  int stats_size() const;
  void clear_stats();
  static const int kStatsFieldNumber = 1;
  ::caffe2::ProfDAGProto* mutable_stats(int index);
  ::google::protobuf::RepeatedPtrField< ::caffe2::ProfDAGProto >*
      mutable_stats();
  const ::caffe2::ProfDAGProto& stats(int index) const;
  ::caffe2::ProfDAGProto* add_stats();
  const ::google::protobuf::RepeatedPtrField< ::caffe2::ProfDAGProto >&
      stats() const;

  // optional string net_name = 2;
  bool has_net_name() const;
  void clear_net_name();
  static const int kNetNameFieldNumber = 2;
  const ::std::string& net_name() const;
  void set_net_name(const ::std::string& value);
  #if LANG_CXX11
  void set_net_name(::std::string&& value);
  #endif
  void set_net_name(const char* value);
  void set_net_name(const char* value, size_t size);
  ::std::string* mutable_net_name();
  ::std::string* release_net_name();
  void set_allocated_net_name(::std::string* net_name);

  // @@protoc_insertion_point(class_scope:caffe2.ProfDAGProtos)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::caffe2::ProfDAGProto > stats_;
  ::google::protobuf::internal::ArenaStringPtr net_name_;
  friend struct ::TableStruct_prof_5fdag_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TwoNumberStatsProto

// optional float mean = 1;
inline bool TwoNumberStatsProto::has_mean() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TwoNumberStatsProto::clear_mean() {
  mean_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float TwoNumberStatsProto::mean() const {
  // @@protoc_insertion_point(field_get:caffe2.TwoNumberStatsProto.mean)
  return mean_;
}
inline void TwoNumberStatsProto::set_mean(float value) {
  _has_bits_[0] |= 0x00000001u;
  mean_ = value;
  // @@protoc_insertion_point(field_set:caffe2.TwoNumberStatsProto.mean)
}

// optional float stddev = 2;
inline bool TwoNumberStatsProto::has_stddev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TwoNumberStatsProto::clear_stddev() {
  stddev_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float TwoNumberStatsProto::stddev() const {
  // @@protoc_insertion_point(field_get:caffe2.TwoNumberStatsProto.stddev)
  return stddev_;
}
inline void TwoNumberStatsProto::set_stddev(float value) {
  _has_bits_[0] |= 0x00000002u;
  stddev_ = value;
  // @@protoc_insertion_point(field_set:caffe2.TwoNumberStatsProto.stddev)
}

// optional int64 count = 3;
inline bool TwoNumberStatsProto::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TwoNumberStatsProto::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int64 TwoNumberStatsProto::count() const {
  // @@protoc_insertion_point(field_get:caffe2.TwoNumberStatsProto.count)
  return count_;
}
inline void TwoNumberStatsProto::set_count(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  count_ = value;
  // @@protoc_insertion_point(field_set:caffe2.TwoNumberStatsProto.count)
}

// -------------------------------------------------------------------

// BlobProfile

// optional string name = 1;
inline bool BlobProfile::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlobProfile::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& BlobProfile::name() const {
  // @@protoc_insertion_point(field_get:caffe2.BlobProfile.name)
  return name_.GetNoArena();
}
inline void BlobProfile::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.BlobProfile.name)
}
#if LANG_CXX11
inline void BlobProfile::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.BlobProfile.name)
}
#endif
inline void BlobProfile::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.BlobProfile.name)
}
inline void BlobProfile::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.BlobProfile.name)
}
inline ::std::string* BlobProfile::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:caffe2.BlobProfile.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BlobProfile::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.BlobProfile.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BlobProfile::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.BlobProfile.name)
}

// optional .caffe2.TwoNumberStatsProto bytes_used = 3;
inline bool BlobProfile::has_bytes_used() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlobProfile::clear_bytes_used() {
  if (bytes_used_ != nullptr) bytes_used_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::caffe2::TwoNumberStatsProto& BlobProfile::bytes_used() const {
  const ::caffe2::TwoNumberStatsProto* p = bytes_used_;
  // @@protoc_insertion_point(field_get:caffe2.BlobProfile.bytes_used)
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe2::TwoNumberStatsProto*>(
      &::caffe2::_TwoNumberStatsProto_default_instance_);
}
inline ::caffe2::TwoNumberStatsProto* BlobProfile::release_bytes_used() {
  // @@protoc_insertion_point(field_release:caffe2.BlobProfile.bytes_used)
  _has_bits_[0] &= ~0x00000002u;
  ::caffe2::TwoNumberStatsProto* temp = bytes_used_;
  bytes_used_ = nullptr;
  return temp;
}
inline ::caffe2::TwoNumberStatsProto* BlobProfile::mutable_bytes_used() {
  _has_bits_[0] |= 0x00000002u;
  if (bytes_used_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe2::TwoNumberStatsProto>(GetArenaNoVirtual());
    bytes_used_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.BlobProfile.bytes_used)
  return bytes_used_;
}
inline void BlobProfile::set_allocated_bytes_used(::caffe2::TwoNumberStatsProto* bytes_used) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bytes_used_;
  }
  if (bytes_used) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bytes_used = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bytes_used, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bytes_used_ = bytes_used;
  // @@protoc_insertion_point(field_set_allocated:caffe2.BlobProfile.bytes_used)
}

// -------------------------------------------------------------------

// ProfDAGProto

// required string name = 1;
inline bool ProfDAGProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfDAGProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ProfDAGProto::name() const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProto.name)
  return name_.GetNoArena();
}
inline void ProfDAGProto::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.ProfDAGProto.name)
}
#if LANG_CXX11
inline void ProfDAGProto::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.ProfDAGProto.name)
}
#endif
inline void ProfDAGProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.ProfDAGProto.name)
}
inline void ProfDAGProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.ProfDAGProto.name)
}
inline ::std::string* ProfDAGProto::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:caffe2.ProfDAGProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProfDAGProto::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.ProfDAGProto.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfDAGProto::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.ProfDAGProto.name)
}

// required float mean = 2;
inline bool ProfDAGProto::has_mean() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProfDAGProto::clear_mean() {
  mean_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ProfDAGProto::mean() const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProto.mean)
  return mean_;
}
inline void ProfDAGProto::set_mean(float value) {
  _has_bits_[0] |= 0x00000004u;
  mean_ = value;
  // @@protoc_insertion_point(field_set:caffe2.ProfDAGProto.mean)
}

// required float stddev = 3;
inline bool ProfDAGProto::has_stddev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProfDAGProto::clear_stddev() {
  stddev_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float ProfDAGProto::stddev() const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProto.stddev)
  return stddev_;
}
inline void ProfDAGProto::set_stddev(float value) {
  _has_bits_[0] |= 0x00000008u;
  stddev_ = value;
  // @@protoc_insertion_point(field_set:caffe2.ProfDAGProto.stddev)
}

// optional .caffe2.TwoNumberStatsProto execution_time = 4;
inline bool ProfDAGProto::has_execution_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProfDAGProto::clear_execution_time() {
  if (execution_time_ != nullptr) execution_time_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::caffe2::TwoNumberStatsProto& ProfDAGProto::execution_time() const {
  const ::caffe2::TwoNumberStatsProto* p = execution_time_;
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProto.execution_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::caffe2::TwoNumberStatsProto*>(
      &::caffe2::_TwoNumberStatsProto_default_instance_);
}
inline ::caffe2::TwoNumberStatsProto* ProfDAGProto::release_execution_time() {
  // @@protoc_insertion_point(field_release:caffe2.ProfDAGProto.execution_time)
  _has_bits_[0] &= ~0x00000002u;
  ::caffe2::TwoNumberStatsProto* temp = execution_time_;
  execution_time_ = nullptr;
  return temp;
}
inline ::caffe2::TwoNumberStatsProto* ProfDAGProto::mutable_execution_time() {
  _has_bits_[0] |= 0x00000002u;
  if (execution_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::caffe2::TwoNumberStatsProto>(GetArenaNoVirtual());
    execution_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.ProfDAGProto.execution_time)
  return execution_time_;
}
inline void ProfDAGProto::set_allocated_execution_time(::caffe2::TwoNumberStatsProto* execution_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete execution_time_;
  }
  if (execution_time) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      execution_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, execution_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  execution_time_ = execution_time;
  // @@protoc_insertion_point(field_set_allocated:caffe2.ProfDAGProto.execution_time)
}

// repeated .caffe2.BlobProfile output_profile = 5;
inline int ProfDAGProto::output_profile_size() const {
  return output_profile_.size();
}
inline void ProfDAGProto::clear_output_profile() {
  output_profile_.Clear();
}
inline ::caffe2::BlobProfile* ProfDAGProto::mutable_output_profile(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.ProfDAGProto.output_profile)
  return output_profile_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::caffe2::BlobProfile >*
ProfDAGProto::mutable_output_profile() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.ProfDAGProto.output_profile)
  return &output_profile_;
}
inline const ::caffe2::BlobProfile& ProfDAGProto::output_profile(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProto.output_profile)
  return output_profile_.Get(index);
}
inline ::caffe2::BlobProfile* ProfDAGProto::add_output_profile() {
  // @@protoc_insertion_point(field_add:caffe2.ProfDAGProto.output_profile)
  return output_profile_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe2::BlobProfile >&
ProfDAGProto::output_profile() const {
  // @@protoc_insertion_point(field_list:caffe2.ProfDAGProto.output_profile)
  return output_profile_;
}

// -------------------------------------------------------------------

// ProfDAGProtos

// repeated .caffe2.ProfDAGProto stats = 1;
inline int ProfDAGProtos::stats_size() const {
  return stats_.size();
}
inline void ProfDAGProtos::clear_stats() {
  stats_.Clear();
}
inline ::caffe2::ProfDAGProto* ProfDAGProtos::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.ProfDAGProtos.stats)
  return stats_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::caffe2::ProfDAGProto >*
ProfDAGProtos::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.ProfDAGProtos.stats)
  return &stats_;
}
inline const ::caffe2::ProfDAGProto& ProfDAGProtos::stats(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProtos.stats)
  return stats_.Get(index);
}
inline ::caffe2::ProfDAGProto* ProfDAGProtos::add_stats() {
  // @@protoc_insertion_point(field_add:caffe2.ProfDAGProtos.stats)
  return stats_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::caffe2::ProfDAGProto >&
ProfDAGProtos::stats() const {
  // @@protoc_insertion_point(field_list:caffe2.ProfDAGProtos.stats)
  return stats_;
}

// optional string net_name = 2;
inline bool ProfDAGProtos::has_net_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfDAGProtos::clear_net_name() {
  net_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ProfDAGProtos::net_name() const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProtos.net_name)
  return net_name_.GetNoArena();
}
inline void ProfDAGProtos::set_net_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  net_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.ProfDAGProtos.net_name)
}
#if LANG_CXX11
inline void ProfDAGProtos::set_net_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  net_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:caffe2.ProfDAGProtos.net_name)
}
#endif
inline void ProfDAGProtos::set_net_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  net_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.ProfDAGProtos.net_name)
}
inline void ProfDAGProtos::set_net_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  net_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.ProfDAGProtos.net_name)
}
inline ::std::string* ProfDAGProtos::mutable_net_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:caffe2.ProfDAGProtos.net_name)
  return net_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProfDAGProtos::release_net_name() {
  // @@protoc_insertion_point(field_release:caffe2.ProfDAGProtos.net_name)
  if (!has_net_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return net_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProfDAGProtos::set_allocated_net_name(::std::string* net_name) {
  if (net_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  net_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net_name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.ProfDAGProtos.net_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe2

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_prof_5fdag_2eproto
