// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prof_dag.proto

#include "prof_dag.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_prof_5fdag_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TwoNumberStatsProto_prof_5fdag_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_prof_5fdag_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BlobProfile_prof_5fdag_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_prof_5fdag_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ProfDAGProto_prof_5fdag_2eproto;
namespace caffe2 {
class TwoNumberStatsProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TwoNumberStatsProto> _instance;
} _TwoNumberStatsProto_default_instance_;
class BlobProfileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlobProfile> _instance;
} _BlobProfile_default_instance_;
class ProfDAGProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProfDAGProto> _instance;
} _ProfDAGProto_default_instance_;
class ProfDAGProtosDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ProfDAGProtos> _instance;
} _ProfDAGProtos_default_instance_;
}  // namespace caffe2
static void InitDefaultsTwoNumberStatsProto_prof_5fdag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::caffe2::_TwoNumberStatsProto_default_instance_;
    new (ptr) ::caffe2::TwoNumberStatsProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::caffe2::TwoNumberStatsProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TwoNumberStatsProto_prof_5fdag_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTwoNumberStatsProto_prof_5fdag_2eproto}, {}};

static void InitDefaultsBlobProfile_prof_5fdag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::caffe2::_BlobProfile_default_instance_;
    new (ptr) ::caffe2::BlobProfile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::caffe2::BlobProfile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BlobProfile_prof_5fdag_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBlobProfile_prof_5fdag_2eproto}, {
      &scc_info_TwoNumberStatsProto_prof_5fdag_2eproto.base,}};

static void InitDefaultsProfDAGProto_prof_5fdag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::caffe2::_ProfDAGProto_default_instance_;
    new (ptr) ::caffe2::ProfDAGProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::caffe2::ProfDAGProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ProfDAGProto_prof_5fdag_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsProfDAGProto_prof_5fdag_2eproto}, {
      &scc_info_TwoNumberStatsProto_prof_5fdag_2eproto.base,
      &scc_info_BlobProfile_prof_5fdag_2eproto.base,}};

static void InitDefaultsProfDAGProtos_prof_5fdag_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::caffe2::_ProfDAGProtos_default_instance_;
    new (ptr) ::caffe2::ProfDAGProtos();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::caffe2::ProfDAGProtos::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ProfDAGProtos_prof_5fdag_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsProfDAGProtos_prof_5fdag_2eproto}, {
      &scc_info_ProfDAGProto_prof_5fdag_2eproto.base,}};

void InitDefaults_prof_5fdag_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_TwoNumberStatsProto_prof_5fdag_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BlobProfile_prof_5fdag_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProfDAGProto_prof_5fdag_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ProfDAGProtos_prof_5fdag_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_prof_5fdag_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_prof_5fdag_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_prof_5fdag_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_prof_5fdag_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::caffe2::TwoNumberStatsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::caffe2::TwoNumberStatsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::caffe2::TwoNumberStatsProto, mean_),
  PROTOBUF_FIELD_OFFSET(::caffe2::TwoNumberStatsProto, stddev_),
  PROTOBUF_FIELD_OFFSET(::caffe2::TwoNumberStatsProto, count_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::caffe2::BlobProfile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::caffe2::BlobProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::caffe2::BlobProfile, name_),
  PROTOBUF_FIELD_OFFSET(::caffe2::BlobProfile, bytes_used_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::caffe2::ProfDAGProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::caffe2::ProfDAGProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::caffe2::ProfDAGProto, name_),
  PROTOBUF_FIELD_OFFSET(::caffe2::ProfDAGProto, mean_),
  PROTOBUF_FIELD_OFFSET(::caffe2::ProfDAGProto, stddev_),
  PROTOBUF_FIELD_OFFSET(::caffe2::ProfDAGProto, execution_time_),
  PROTOBUF_FIELD_OFFSET(::caffe2::ProfDAGProto, output_profile_),
  0,
  2,
  3,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::caffe2::ProfDAGProtos, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::caffe2::ProfDAGProtos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::caffe2::ProfDAGProtos, stats_),
  PROTOBUF_FIELD_OFFSET(::caffe2::ProfDAGProtos, net_name_),
  ~0u,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::caffe2::TwoNumberStatsProto)},
  { 11, 18, sizeof(::caffe2::BlobProfile)},
  { 20, 30, sizeof(::caffe2::ProfDAGProto)},
  { 35, 42, sizeof(::caffe2::ProfDAGProtos)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::caffe2::_TwoNumberStatsProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::caffe2::_BlobProfile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::caffe2::_ProfDAGProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::caffe2::_ProfDAGProtos_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_prof_5fdag_2eproto = {
  {}, AddDescriptors_prof_5fdag_2eproto, "prof_dag.proto", schemas,
  file_default_instances, TableStruct_prof_5fdag_2eproto::offsets,
  file_level_metadata_prof_5fdag_2eproto, 4, file_level_enum_descriptors_prof_5fdag_2eproto, file_level_service_descriptors_prof_5fdag_2eproto,
};

const char descriptor_table_protodef_prof_5fdag_2eproto[] =
  "\n\016prof_dag.proto\022\006caffe2\"B\n\023TwoNumberSta"
  "tsProto\022\014\n\004mean\030\001 \001(\002\022\016\n\006stddev\030\002 \001(\002\022\r\n"
  "\005count\030\003 \001(\003\"L\n\013BlobProfile\022\014\n\004name\030\001 \001("
  "\t\022/\n\nbytes_used\030\003 \001(\0132\033.caffe2.TwoNumber"
  "StatsProto\"\234\001\n\014ProfDAGProto\022\014\n\004name\030\001 \002("
  "\t\022\014\n\004mean\030\002 \002(\002\022\016\n\006stddev\030\003 \002(\002\0223\n\016execu"
  "tion_time\030\004 \001(\0132\033.caffe2.TwoNumberStatsP"
  "roto\022+\n\016output_profile\030\005 \003(\0132\023.caffe2.Bl"
  "obProfile\"F\n\rProfDAGProtos\022#\n\005stats\030\001 \003("
  "\0132\024.caffe2.ProfDAGProto\022\020\n\010net_name\030\002 \001("
  "\t"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_prof_5fdag_2eproto = {
  false, InitDefaults_prof_5fdag_2eproto, 
  descriptor_table_protodef_prof_5fdag_2eproto,
  "prof_dag.proto", &assign_descriptors_table_prof_5fdag_2eproto, 401,
};

void AddDescriptors_prof_5fdag_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_prof_5fdag_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_prof_5fdag_2eproto = []() { AddDescriptors_prof_5fdag_2eproto(); return true; }();
namespace caffe2 {

// ===================================================================

void TwoNumberStatsProto::InitAsDefaultInstance() {
}
class TwoNumberStatsProto::HasBitSetters {
 public:
  static void set_has_mean(TwoNumberStatsProto* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_stddev(TwoNumberStatsProto* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_count(TwoNumberStatsProto* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TwoNumberStatsProto::kMeanFieldNumber;
const int TwoNumberStatsProto::kStddevFieldNumber;
const int TwoNumberStatsProto::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TwoNumberStatsProto::TwoNumberStatsProto()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.TwoNumberStatsProto)
}
TwoNumberStatsProto::TwoNumberStatsProto(const TwoNumberStatsProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mean_, &from.mean_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&mean_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:caffe2.TwoNumberStatsProto)
}

void TwoNumberStatsProto::SharedCtor() {
  ::memset(&mean_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&mean_)) + sizeof(count_));
}

TwoNumberStatsProto::~TwoNumberStatsProto() {
  // @@protoc_insertion_point(destructor:caffe2.TwoNumberStatsProto)
  SharedDtor();
}

void TwoNumberStatsProto::SharedDtor() {
}

void TwoNumberStatsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TwoNumberStatsProto& TwoNumberStatsProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TwoNumberStatsProto_prof_5fdag_2eproto.base);
  return *internal_default_instance();
}


void TwoNumberStatsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.TwoNumberStatsProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&mean_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&mean_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TwoNumberStatsProto::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TwoNumberStatsProto*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional float mean = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_mean(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float stddev = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_stddev(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional int64 count = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TwoNumberStatsProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.TwoNumberStatsProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float mean = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_mean(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float stddev = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_stddev(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stddev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.TwoNumberStatsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.TwoNumberStatsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TwoNumberStatsProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.TwoNumberStatsProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float mean = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->mean(), output);
  }

  // optional float stddev = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->stddev(), output);
  }

  // optional int64 count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.TwoNumberStatsProto)
}

::google::protobuf::uint8* TwoNumberStatsProto::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.TwoNumberStatsProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float mean = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->mean(), target);
  }

  // optional float stddev = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->stddev(), target);
  }

  // optional int64 count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.TwoNumberStatsProto)
  return target;
}

size_t TwoNumberStatsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.TwoNumberStatsProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float mean = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float stddev = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int64 count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TwoNumberStatsProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.TwoNumberStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TwoNumberStatsProto* source =
      ::google::protobuf::DynamicCastToGenerated<TwoNumberStatsProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.TwoNumberStatsProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.TwoNumberStatsProto)
    MergeFrom(*source);
  }
}

void TwoNumberStatsProto::MergeFrom(const TwoNumberStatsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.TwoNumberStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mean_ = from.mean_;
    }
    if (cached_has_bits & 0x00000002u) {
      stddev_ = from.stddev_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TwoNumberStatsProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.TwoNumberStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TwoNumberStatsProto::CopyFrom(const TwoNumberStatsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.TwoNumberStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwoNumberStatsProto::IsInitialized() const {
  return true;
}

void TwoNumberStatsProto::Swap(TwoNumberStatsProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TwoNumberStatsProto::InternalSwap(TwoNumberStatsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mean_, other->mean_);
  swap(stddev_, other->stddev_);
  swap(count_, other->count_);
}

::google::protobuf::Metadata TwoNumberStatsProto::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_prof_5fdag_2eproto);
  return ::file_level_metadata_prof_5fdag_2eproto[kIndexInFileMessages];
}


// ===================================================================

void BlobProfile::InitAsDefaultInstance() {
  ::caffe2::_BlobProfile_default_instance_._instance.get_mutable()->bytes_used_ = const_cast< ::caffe2::TwoNumberStatsProto*>(
      ::caffe2::TwoNumberStatsProto::internal_default_instance());
}
class BlobProfile::HasBitSetters {
 public:
  static void set_has_name(BlobProfile* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::caffe2::TwoNumberStatsProto& bytes_used(const BlobProfile* msg);
  static void set_has_bytes_used(BlobProfile* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::caffe2::TwoNumberStatsProto&
BlobProfile::HasBitSetters::bytes_used(const BlobProfile* msg) {
  return *msg->bytes_used_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlobProfile::kNameFieldNumber;
const int BlobProfile::kBytesUsedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlobProfile::BlobProfile()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.BlobProfile)
}
BlobProfile::BlobProfile(const BlobProfile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_bytes_used()) {
    bytes_used_ = new ::caffe2::TwoNumberStatsProto(*from.bytes_used_);
  } else {
    bytes_used_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:caffe2.BlobProfile)
}

void BlobProfile::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_BlobProfile_prof_5fdag_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytes_used_ = nullptr;
}

BlobProfile::~BlobProfile() {
  // @@protoc_insertion_point(destructor:caffe2.BlobProfile)
  SharedDtor();
}

void BlobProfile::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bytes_used_;
}

void BlobProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlobProfile& BlobProfile::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_BlobProfile_prof_5fdag_2eproto.base);
  return *internal_default_instance();
}


void BlobProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.BlobProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bytes_used_ != nullptr);
      bytes_used_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BlobProfile::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<BlobProfile*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("caffe2.BlobProfile.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .caffe2.TwoNumberStatsProto bytes_used = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::caffe2::TwoNumberStatsProto::_InternalParse;
        object = msg->mutable_bytes_used();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BlobProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.BlobProfile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.BlobProfile.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe2.TwoNumberStatsProto bytes_used = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bytes_used()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.BlobProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.BlobProfile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BlobProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.BlobProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.BlobProfile.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .caffe2.TwoNumberStatsProto bytes_used = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::bytes_used(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.BlobProfile)
}

::google::protobuf::uint8* BlobProfile::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.BlobProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.BlobProfile.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .caffe2.TwoNumberStatsProto bytes_used = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::bytes_used(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.BlobProfile)
  return target;
}

size_t BlobProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.BlobProfile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .caffe2.TwoNumberStatsProto bytes_used = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bytes_used_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlobProfile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.BlobProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobProfile* source =
      ::google::protobuf::DynamicCastToGenerated<BlobProfile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.BlobProfile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.BlobProfile)
    MergeFrom(*source);
  }
}

void BlobProfile::MergeFrom(const BlobProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.BlobProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bytes_used()->::caffe2::TwoNumberStatsProto::MergeFrom(from.bytes_used());
    }
  }
}

void BlobProfile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.BlobProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobProfile::CopyFrom(const BlobProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.BlobProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobProfile::IsInitialized() const {
  return true;
}

void BlobProfile::Swap(BlobProfile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlobProfile::InternalSwap(BlobProfile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bytes_used_, other->bytes_used_);
}

::google::protobuf::Metadata BlobProfile::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_prof_5fdag_2eproto);
  return ::file_level_metadata_prof_5fdag_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProfDAGProto::InitAsDefaultInstance() {
  ::caffe2::_ProfDAGProto_default_instance_._instance.get_mutable()->execution_time_ = const_cast< ::caffe2::TwoNumberStatsProto*>(
      ::caffe2::TwoNumberStatsProto::internal_default_instance());
}
class ProfDAGProto::HasBitSetters {
 public:
  static void set_has_name(ProfDAGProto* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_mean(ProfDAGProto* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_stddev(ProfDAGProto* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::caffe2::TwoNumberStatsProto& execution_time(const ProfDAGProto* msg);
  static void set_has_execution_time(ProfDAGProto* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::caffe2::TwoNumberStatsProto&
ProfDAGProto::HasBitSetters::execution_time(const ProfDAGProto* msg) {
  return *msg->execution_time_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfDAGProto::kNameFieldNumber;
const int ProfDAGProto::kMeanFieldNumber;
const int ProfDAGProto::kStddevFieldNumber;
const int ProfDAGProto::kExecutionTimeFieldNumber;
const int ProfDAGProto::kOutputProfileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfDAGProto::ProfDAGProto()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.ProfDAGProto)
}
ProfDAGProto::ProfDAGProto(const ProfDAGProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      output_profile_(from.output_profile_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_execution_time()) {
    execution_time_ = new ::caffe2::TwoNumberStatsProto(*from.execution_time_);
  } else {
    execution_time_ = nullptr;
  }
  ::memcpy(&mean_, &from.mean_,
    static_cast<size_t>(reinterpret_cast<char*>(&stddev_) -
    reinterpret_cast<char*>(&mean_)) + sizeof(stddev_));
  // @@protoc_insertion_point(copy_constructor:caffe2.ProfDAGProto)
}

void ProfDAGProto::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ProfDAGProto_prof_5fdag_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&execution_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stddev_) -
      reinterpret_cast<char*>(&execution_time_)) + sizeof(stddev_));
}

ProfDAGProto::~ProfDAGProto() {
  // @@protoc_insertion_point(destructor:caffe2.ProfDAGProto)
  SharedDtor();
}

void ProfDAGProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete execution_time_;
}

void ProfDAGProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfDAGProto& ProfDAGProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProfDAGProto_prof_5fdag_2eproto.base);
  return *internal_default_instance();
}


void ProfDAGProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.ProfDAGProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_profile_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(execution_time_ != nullptr);
      execution_time_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&mean_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stddev_) -
        reinterpret_cast<char*>(&mean_)) + sizeof(stddev_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProfDAGProto::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProfDAGProto*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("caffe2.ProfDAGProto.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // required float mean = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_mean(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float stddev = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_stddev(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional .caffe2.TwoNumberStatsProto execution_time = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::caffe2::TwoNumberStatsProto::_InternalParse;
        object = msg->mutable_execution_time();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .caffe2.BlobProfile output_profile = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::caffe2::BlobProfile::_InternalParse;
          object = msg->add_output_profile();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProfDAGProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.ProfDAGProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.ProfDAGProto.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float mean = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_mean(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float stddev = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_stddev(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stddev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .caffe2.TwoNumberStatsProto execution_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_execution_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .caffe2.BlobProfile output_profile = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_output_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.ProfDAGProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.ProfDAGProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProfDAGProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.ProfDAGProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ProfDAGProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required float mean = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->mean(), output);
  }

  // required float stddev = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->stddev(), output);
  }

  // optional .caffe2.TwoNumberStatsProto execution_time = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::execution_time(this), output);
  }

  // repeated .caffe2.BlobProfile output_profile = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_profile_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->output_profile(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.ProfDAGProto)
}

::google::protobuf::uint8* ProfDAGProto::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.ProfDAGProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ProfDAGProto.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required float mean = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->mean(), target);
  }

  // required float stddev = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->stddev(), target);
  }

  // optional .caffe2.TwoNumberStatsProto execution_time = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::execution_time(this), target);
  }

  // repeated .caffe2.BlobProfile output_profile = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_profile_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->output_profile(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.ProfDAGProto)
  return target;
}

size_t ProfDAGProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe2.ProfDAGProto)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_mean()) {
    // required float mean = 2;
    total_size += 1 + 4;
  }

  if (has_stddev()) {
    // required float stddev = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ProfDAGProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.ProfDAGProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required float mean = 2;
    total_size += 1 + 4;

    // required float stddev = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .caffe2.BlobProfile output_profile = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->output_profile_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->output_profile(static_cast<int>(i)));
    }
  }

  // optional .caffe2.TwoNumberStatsProto execution_time = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *execution_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfDAGProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.ProfDAGProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfDAGProto* source =
      ::google::protobuf::DynamicCastToGenerated<ProfDAGProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.ProfDAGProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.ProfDAGProto)
    MergeFrom(*source);
  }
}

void ProfDAGProto::MergeFrom(const ProfDAGProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.ProfDAGProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output_profile_.MergeFrom(from.output_profile_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_execution_time()->::caffe2::TwoNumberStatsProto::MergeFrom(from.execution_time());
    }
    if (cached_has_bits & 0x00000004u) {
      mean_ = from.mean_;
    }
    if (cached_has_bits & 0x00000008u) {
      stddev_ = from.stddev_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProfDAGProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.ProfDAGProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfDAGProto::CopyFrom(const ProfDAGProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.ProfDAGProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfDAGProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  return true;
}

void ProfDAGProto::Swap(ProfDAGProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfDAGProto::InternalSwap(ProfDAGProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&output_profile_)->InternalSwap(CastToBase(&other->output_profile_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(execution_time_, other->execution_time_);
  swap(mean_, other->mean_);
  swap(stddev_, other->stddev_);
}

::google::protobuf::Metadata ProfDAGProto::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_prof_5fdag_2eproto);
  return ::file_level_metadata_prof_5fdag_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ProfDAGProtos::InitAsDefaultInstance() {
}
class ProfDAGProtos::HasBitSetters {
 public:
  static void set_has_net_name(ProfDAGProtos* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfDAGProtos::kStatsFieldNumber;
const int ProfDAGProtos::kNetNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfDAGProtos::ProfDAGProtos()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.ProfDAGProtos)
}
ProfDAGProtos::ProfDAGProtos(const ProfDAGProtos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  net_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_net_name()) {
    net_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_name_);
  }
  // @@protoc_insertion_point(copy_constructor:caffe2.ProfDAGProtos)
}

void ProfDAGProtos::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ProfDAGProtos_prof_5fdag_2eproto.base);
  net_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ProfDAGProtos::~ProfDAGProtos() {
  // @@protoc_insertion_point(destructor:caffe2.ProfDAGProtos)
  SharedDtor();
}

void ProfDAGProtos::SharedDtor() {
  net_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProfDAGProtos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProfDAGProtos& ProfDAGProtos::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ProfDAGProtos_prof_5fdag_2eproto.base);
  return *internal_default_instance();
}


void ProfDAGProtos::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.ProfDAGProtos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    net_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProfDAGProtos::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ProfDAGProtos*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .caffe2.ProfDAGProto stats = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::caffe2::ProfDAGProto::_InternalParse;
          object = msg->add_stats();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional string net_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("caffe2.ProfDAGProtos.net_name");
        object = msg->mutable_net_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProfDAGProtos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.ProfDAGProtos)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe2.ProfDAGProto stats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string net_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->net_name().data(), static_cast<int>(this->net_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.ProfDAGProtos.net_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.ProfDAGProtos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.ProfDAGProtos)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProfDAGProtos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.ProfDAGProtos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe2.ProfDAGProto stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->stats(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string net_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net_name().data(), static_cast<int>(this->net_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ProfDAGProtos.net_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->net_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.ProfDAGProtos)
}

::google::protobuf::uint8* ProfDAGProtos::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.ProfDAGProtos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .caffe2.ProfDAGProto stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->stats(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string net_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net_name().data(), static_cast<int>(this->net_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ProfDAGProtos.net_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->net_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.ProfDAGProtos)
  return target;
}

size_t ProfDAGProtos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.ProfDAGProtos)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .caffe2.ProfDAGProto stats = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->stats(static_cast<int>(i)));
    }
  }

  // optional string net_name = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->net_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProfDAGProtos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.ProfDAGProtos)
  GOOGLE_DCHECK_NE(&from, this);
  const ProfDAGProtos* source =
      ::google::protobuf::DynamicCastToGenerated<ProfDAGProtos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.ProfDAGProtos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.ProfDAGProtos)
    MergeFrom(*source);
  }
}

void ProfDAGProtos::MergeFrom(const ProfDAGProtos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.ProfDAGProtos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  if (from.has_net_name()) {
    _has_bits_[0] |= 0x00000001u;
    net_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_name_);
  }
}

void ProfDAGProtos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.ProfDAGProtos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfDAGProtos::CopyFrom(const ProfDAGProtos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.ProfDAGProtos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfDAGProtos::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->stats())) return false;
  return true;
}

void ProfDAGProtos::Swap(ProfDAGProtos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfDAGProtos::InternalSwap(ProfDAGProtos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&stats_)->InternalSwap(CastToBase(&other->stats_));
  net_name_.Swap(&other->net_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ProfDAGProtos::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_prof_5fdag_2eproto);
  return ::file_level_metadata_prof_5fdag_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace caffe2
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::caffe2::TwoNumberStatsProto* Arena::CreateMaybeMessage< ::caffe2::TwoNumberStatsProto >(Arena* arena) {
  return Arena::CreateInternal< ::caffe2::TwoNumberStatsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::caffe2::BlobProfile* Arena::CreateMaybeMessage< ::caffe2::BlobProfile >(Arena* arena) {
  return Arena::CreateInternal< ::caffe2::BlobProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::caffe2::ProfDAGProto* Arena::CreateMaybeMessage< ::caffe2::ProfDAGProto >(Arena* arena) {
  return Arena::CreateInternal< ::caffe2::ProfDAGProto >(arena);
}
template<> PROTOBUF_NOINLINE ::caffe2::ProfDAGProtos* Arena::CreateMaybeMessage< ::caffe2::ProfDAGProtos >(Arena* arena) {
  return Arena::CreateInternal< ::caffe2::ProfDAGProtos >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
