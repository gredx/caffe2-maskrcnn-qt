// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: predictor_consts.proto

#include "predictor_consts.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace caffe2 {
class PredictorConstsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PredictorConsts> _instance;
} _PredictorConsts_default_instance_;
}  // namespace caffe2
static void InitDefaultsPredictorConsts_predictor_5fconsts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_meta_net_def_.DefaultConstruct();
  *::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_meta_net_def_.get_mutable() = ::std::string("!!META_NET_DEF", 14);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_meta_net_def_.get_mutable());
  ::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predictor_dbreader_.DefaultConstruct();
  *::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predictor_dbreader_.get_mutable() = ::std::string("!!PREDICTOR_DBREADER", 20);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predictor_dbreader_.get_mutable());
  ::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_parameters_blob_type_.DefaultConstruct();
  *::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_parameters_blob_type_.get_mutable() = ::std::string("PARAMETERS_BLOB_TYPE", 20);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_parameters_blob_type_.get_mutable());
  ::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_inputs_blob_type_.DefaultConstruct();
  *::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_inputs_blob_type_.get_mutable() = ::std::string("INPUTS_BLOB_TYPE", 16);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_inputs_blob_type_.get_mutable());
  ::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_outputs_blob_type_.DefaultConstruct();
  *::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_outputs_blob_type_.get_mutable() = ::std::string("OUTPUTS_BLOB_TYPE", 17);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_outputs_blob_type_.get_mutable());
  ::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_global_init_net_type_.DefaultConstruct();
  *::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_global_init_net_type_.get_mutable() = ::std::string("GLOBAL_INIT_NET_TYPE", 20);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_global_init_net_type_.get_mutable());
  ::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_init_net_type_.DefaultConstruct();
  *::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_init_net_type_.get_mutable() = ::std::string("PREDICT_INIT_NET_TYPE", 21);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_init_net_type_.get_mutable());
  ::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_net_type_.DefaultConstruct();
  *::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_net_type_.get_mutable() = ::std::string("PREDICT_NET_TYPE", 16);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_net_type_.get_mutable());
  ::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_single_predictor_.DefaultConstruct();
  *::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_single_predictor_.get_mutable() = ::std::string("SINGLE_PREDICTOR", 16);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_single_predictor_.get_mutable());
  ::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_multi_predictor_.DefaultConstruct();
  *::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_multi_predictor_.get_mutable() = ::std::string("MULTI_PREDICTOR", 15);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_multi_predictor_.get_mutable());
  ::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_init_plan_type_.DefaultConstruct();
  *::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_init_plan_type_.get_mutable() = ::std::string("TRAIN_INIT_PLAN_TYPE", 20);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_init_plan_type_.get_mutable());
  ::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_plan_type_.DefaultConstruct();
  *::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_plan_type_.get_mutable() = ::std::string("TRAIN_PLAN_TYPE", 15);
  ::google::protobuf::internal::OnShutdownDestroyString(
      ::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_plan_type_.get_mutable());
  {
    void* ptr = &::caffe2::_PredictorConsts_default_instance_;
    new (ptr) ::caffe2::PredictorConsts();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::caffe2::PredictorConsts::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PredictorConsts_predictor_5fconsts_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPredictorConsts_predictor_5fconsts_2eproto}, {}};

void InitDefaults_predictor_5fconsts_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_PredictorConsts_predictor_5fconsts_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_predictor_5fconsts_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_predictor_5fconsts_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_predictor_5fconsts_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_predictor_5fconsts_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::caffe2::PredictorConsts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::caffe2::PredictorConsts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::caffe2::PredictorConsts, meta_net_def_),
  PROTOBUF_FIELD_OFFSET(::caffe2::PredictorConsts, predictor_dbreader_),
  PROTOBUF_FIELD_OFFSET(::caffe2::PredictorConsts, parameters_blob_type_),
  PROTOBUF_FIELD_OFFSET(::caffe2::PredictorConsts, inputs_blob_type_),
  PROTOBUF_FIELD_OFFSET(::caffe2::PredictorConsts, outputs_blob_type_),
  PROTOBUF_FIELD_OFFSET(::caffe2::PredictorConsts, global_init_net_type_),
  PROTOBUF_FIELD_OFFSET(::caffe2::PredictorConsts, predict_init_net_type_),
  PROTOBUF_FIELD_OFFSET(::caffe2::PredictorConsts, predict_net_type_),
  PROTOBUF_FIELD_OFFSET(::caffe2::PredictorConsts, single_predictor_),
  PROTOBUF_FIELD_OFFSET(::caffe2::PredictorConsts, multi_predictor_),
  PROTOBUF_FIELD_OFFSET(::caffe2::PredictorConsts, train_init_plan_type_),
  PROTOBUF_FIELD_OFFSET(::caffe2::PredictorConsts, train_plan_type_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, sizeof(::caffe2::PredictorConsts)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::caffe2::_PredictorConsts_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_predictor_5fconsts_2eproto = {
  {}, AddDescriptors_predictor_5fconsts_2eproto, "predictor_consts.proto", schemas,
  file_default_instances, TableStruct_predictor_5fconsts_2eproto::offsets,
  file_level_metadata_predictor_5fconsts_2eproto, 1, file_level_enum_descriptors_predictor_5fconsts_2eproto, file_level_service_descriptors_predictor_5fconsts_2eproto,
};

const char descriptor_table_protodef_predictor_5fconsts_2eproto[] =
  "\n\026predictor_consts.proto\022\006caffe2\"\301\004\n\017Pre"
  "dictorConsts\022$\n\014META_NET_DEF\030\001 \001(\t:\016!!ME"
  "TA_NET_DEF\0220\n\022PREDICTOR_DBREADER\030\002 \001(\t:\024"
  "!!PREDICTOR_DBREADER\0222\n\024PARAMETERS_BLOB_"
  "TYPE\030\003 \001(\t:\024PARAMETERS_BLOB_TYPE\022*\n\020INPU"
  "TS_BLOB_TYPE\030\004 \001(\t:\020INPUTS_BLOB_TYPE\022,\n\021"
  "OUTPUTS_BLOB_TYPE\030\005 \001(\t:\021OUTPUTS_BLOB_TY"
  "PE\0222\n\024GLOBAL_INIT_NET_TYPE\030\006 \001(\t:\024GLOBAL"
  "_INIT_NET_TYPE\0224\n\025PREDICT_INIT_NET_TYPE\030"
  "\007 \001(\t:\025PREDICT_INIT_NET_TYPE\022*\n\020PREDICT_"
  "NET_TYPE\030\010 \001(\t:\020PREDICT_NET_TYPE\022*\n\020SING"
  "LE_PREDICTOR\030\t \001(\t:\020SINGLE_PREDICTOR\022(\n\017"
  "MULTI_PREDICTOR\030\n \001(\t:\017MULTI_PREDICTOR\0222"
  "\n\024TRAIN_INIT_PLAN_TYPE\030\013 \001(\t:\024TRAIN_INIT"
  "_PLAN_TYPE\022(\n\017TRAIN_PLAN_TYPE\030\014 \001(\t:\017TRA"
  "IN_PLAN_TYPE"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_predictor_5fconsts_2eproto = {
  false, InitDefaults_predictor_5fconsts_2eproto, 
  descriptor_table_protodef_predictor_5fconsts_2eproto,
  "predictor_consts.proto", &assign_descriptors_table_predictor_5fconsts_2eproto, 612,
};

void AddDescriptors_predictor_5fconsts_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_predictor_5fconsts_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_predictor_5fconsts_2eproto = []() { AddDescriptors_predictor_5fconsts_2eproto(); return true; }();
namespace caffe2 {

// ===================================================================

void PredictorConsts::InitAsDefaultInstance() {
}
class PredictorConsts::HasBitSetters {
 public:
  static void set_has_meta_net_def(PredictorConsts* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_predictor_dbreader(PredictorConsts* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_parameters_blob_type(PredictorConsts* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_inputs_blob_type(PredictorConsts* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_outputs_blob_type(PredictorConsts* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_global_init_net_type(PredictorConsts* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_predict_init_net_type(PredictorConsts* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_predict_net_type(PredictorConsts* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_single_predictor(PredictorConsts* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_multi_predictor(PredictorConsts* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_train_init_plan_type(PredictorConsts* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_train_plan_type(PredictorConsts* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
};

::google::protobuf::internal::ExplicitlyConstructed<::std::string> PredictorConsts::_i_give_permission_to_break_this_code_default_meta_net_def_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> PredictorConsts::_i_give_permission_to_break_this_code_default_predictor_dbreader_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> PredictorConsts::_i_give_permission_to_break_this_code_default_parameters_blob_type_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> PredictorConsts::_i_give_permission_to_break_this_code_default_inputs_blob_type_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> PredictorConsts::_i_give_permission_to_break_this_code_default_outputs_blob_type_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> PredictorConsts::_i_give_permission_to_break_this_code_default_global_init_net_type_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> PredictorConsts::_i_give_permission_to_break_this_code_default_predict_init_net_type_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> PredictorConsts::_i_give_permission_to_break_this_code_default_predict_net_type_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> PredictorConsts::_i_give_permission_to_break_this_code_default_single_predictor_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> PredictorConsts::_i_give_permission_to_break_this_code_default_multi_predictor_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> PredictorConsts::_i_give_permission_to_break_this_code_default_train_init_plan_type_;
::google::protobuf::internal::ExplicitlyConstructed<::std::string> PredictorConsts::_i_give_permission_to_break_this_code_default_train_plan_type_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PredictorConsts::kMETANETDEFFieldNumber;
const int PredictorConsts::kPREDICTORDBREADERFieldNumber;
const int PredictorConsts::kPARAMETERSBLOBTYPEFieldNumber;
const int PredictorConsts::kINPUTSBLOBTYPEFieldNumber;
const int PredictorConsts::kOUTPUTSBLOBTYPEFieldNumber;
const int PredictorConsts::kGLOBALINITNETTYPEFieldNumber;
const int PredictorConsts::kPREDICTINITNETTYPEFieldNumber;
const int PredictorConsts::kPREDICTNETTYPEFieldNumber;
const int PredictorConsts::kSINGLEPREDICTORFieldNumber;
const int PredictorConsts::kMULTIPREDICTORFieldNumber;
const int PredictorConsts::kTRAININITPLANTYPEFieldNumber;
const int PredictorConsts::kTRAINPLANTYPEFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PredictorConsts::PredictorConsts()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.PredictorConsts)
}
PredictorConsts::PredictorConsts(const PredictorConsts& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  meta_net_def_.UnsafeSetDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_meta_net_def_.get());
  if (from.has_meta_net_def()) {
    meta_net_def_.AssignWithDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_meta_net_def_.get(), from.meta_net_def_);
  }
  predictor_dbreader_.UnsafeSetDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predictor_dbreader_.get());
  if (from.has_predictor_dbreader()) {
    predictor_dbreader_.AssignWithDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predictor_dbreader_.get(), from.predictor_dbreader_);
  }
  parameters_blob_type_.UnsafeSetDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_parameters_blob_type_.get());
  if (from.has_parameters_blob_type()) {
    parameters_blob_type_.AssignWithDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_parameters_blob_type_.get(), from.parameters_blob_type_);
  }
  inputs_blob_type_.UnsafeSetDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_inputs_blob_type_.get());
  if (from.has_inputs_blob_type()) {
    inputs_blob_type_.AssignWithDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_inputs_blob_type_.get(), from.inputs_blob_type_);
  }
  outputs_blob_type_.UnsafeSetDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_outputs_blob_type_.get());
  if (from.has_outputs_blob_type()) {
    outputs_blob_type_.AssignWithDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_outputs_blob_type_.get(), from.outputs_blob_type_);
  }
  global_init_net_type_.UnsafeSetDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_global_init_net_type_.get());
  if (from.has_global_init_net_type()) {
    global_init_net_type_.AssignWithDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_global_init_net_type_.get(), from.global_init_net_type_);
  }
  predict_init_net_type_.UnsafeSetDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_init_net_type_.get());
  if (from.has_predict_init_net_type()) {
    predict_init_net_type_.AssignWithDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_init_net_type_.get(), from.predict_init_net_type_);
  }
  predict_net_type_.UnsafeSetDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_net_type_.get());
  if (from.has_predict_net_type()) {
    predict_net_type_.AssignWithDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_net_type_.get(), from.predict_net_type_);
  }
  single_predictor_.UnsafeSetDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_single_predictor_.get());
  if (from.has_single_predictor()) {
    single_predictor_.AssignWithDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_single_predictor_.get(), from.single_predictor_);
  }
  multi_predictor_.UnsafeSetDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_multi_predictor_.get());
  if (from.has_multi_predictor()) {
    multi_predictor_.AssignWithDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_multi_predictor_.get(), from.multi_predictor_);
  }
  train_init_plan_type_.UnsafeSetDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_init_plan_type_.get());
  if (from.has_train_init_plan_type()) {
    train_init_plan_type_.AssignWithDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_init_plan_type_.get(), from.train_init_plan_type_);
  }
  train_plan_type_.UnsafeSetDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_plan_type_.get());
  if (from.has_train_plan_type()) {
    train_plan_type_.AssignWithDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_plan_type_.get(), from.train_plan_type_);
  }
  // @@protoc_insertion_point(copy_constructor:caffe2.PredictorConsts)
}

void PredictorConsts::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PredictorConsts_predictor_5fconsts_2eproto.base);
  meta_net_def_.UnsafeSetDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_meta_net_def_.get());
  predictor_dbreader_.UnsafeSetDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predictor_dbreader_.get());
  parameters_blob_type_.UnsafeSetDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_parameters_blob_type_.get());
  inputs_blob_type_.UnsafeSetDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_inputs_blob_type_.get());
  outputs_blob_type_.UnsafeSetDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_outputs_blob_type_.get());
  global_init_net_type_.UnsafeSetDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_global_init_net_type_.get());
  predict_init_net_type_.UnsafeSetDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_init_net_type_.get());
  predict_net_type_.UnsafeSetDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_net_type_.get());
  single_predictor_.UnsafeSetDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_single_predictor_.get());
  multi_predictor_.UnsafeSetDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_multi_predictor_.get());
  train_init_plan_type_.UnsafeSetDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_init_plan_type_.get());
  train_plan_type_.UnsafeSetDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_plan_type_.get());
}

PredictorConsts::~PredictorConsts() {
  // @@protoc_insertion_point(destructor:caffe2.PredictorConsts)
  SharedDtor();
}

void PredictorConsts::SharedDtor() {
  meta_net_def_.DestroyNoArena(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_meta_net_def_.get());
  predictor_dbreader_.DestroyNoArena(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predictor_dbreader_.get());
  parameters_blob_type_.DestroyNoArena(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_parameters_blob_type_.get());
  inputs_blob_type_.DestroyNoArena(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_inputs_blob_type_.get());
  outputs_blob_type_.DestroyNoArena(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_outputs_blob_type_.get());
  global_init_net_type_.DestroyNoArena(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_global_init_net_type_.get());
  predict_init_net_type_.DestroyNoArena(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_init_net_type_.get());
  predict_net_type_.DestroyNoArena(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_net_type_.get());
  single_predictor_.DestroyNoArena(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_single_predictor_.get());
  multi_predictor_.DestroyNoArena(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_multi_predictor_.get());
  train_init_plan_type_.DestroyNoArena(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_init_plan_type_.get());
  train_plan_type_.DestroyNoArena(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_plan_type_.get());
}

void PredictorConsts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredictorConsts& PredictorConsts::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PredictorConsts_predictor_5fconsts_2eproto.base);
  return *internal_default_instance();
}


void PredictorConsts::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.PredictorConsts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      meta_net_def_.UnsafeMutablePointer()->assign(*&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_meta_net_def_.get());
    }
    if (cached_has_bits & 0x00000002u) {
      predictor_dbreader_.UnsafeMutablePointer()->assign(*&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predictor_dbreader_.get());
    }
    if (cached_has_bits & 0x00000004u) {
      parameters_blob_type_.UnsafeMutablePointer()->assign(*&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_parameters_blob_type_.get());
    }
    if (cached_has_bits & 0x00000008u) {
      inputs_blob_type_.UnsafeMutablePointer()->assign(*&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_inputs_blob_type_.get());
    }
    if (cached_has_bits & 0x00000010u) {
      outputs_blob_type_.UnsafeMutablePointer()->assign(*&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_outputs_blob_type_.get());
    }
    if (cached_has_bits & 0x00000020u) {
      global_init_net_type_.UnsafeMutablePointer()->assign(*&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_global_init_net_type_.get());
    }
    if (cached_has_bits & 0x00000040u) {
      predict_init_net_type_.UnsafeMutablePointer()->assign(*&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_init_net_type_.get());
    }
    if (cached_has_bits & 0x00000080u) {
      predict_net_type_.UnsafeMutablePointer()->assign(*&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_net_type_.get());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      single_predictor_.UnsafeMutablePointer()->assign(*&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_single_predictor_.get());
    }
    if (cached_has_bits & 0x00000200u) {
      multi_predictor_.UnsafeMutablePointer()->assign(*&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_multi_predictor_.get());
    }
    if (cached_has_bits & 0x00000400u) {
      train_init_plan_type_.UnsafeMutablePointer()->assign(*&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_init_plan_type_.get());
    }
    if (cached_has_bits & 0x00000800u) {
      train_plan_type_.UnsafeMutablePointer()->assign(*&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_plan_type_.get());
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PredictorConsts::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PredictorConsts*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("caffe2.PredictorConsts.META_NET_DEF");
        object = msg->mutable_meta_net_def();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("caffe2.PredictorConsts.PREDICTOR_DBREADER");
        object = msg->mutable_predictor_dbreader();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE");
        object = msg->mutable_parameters_blob_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("caffe2.PredictorConsts.INPUTS_BLOB_TYPE");
        object = msg->mutable_inputs_blob_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE");
        object = msg->mutable_outputs_blob_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE");
        object = msg->mutable_global_init_net_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE");
        object = msg->mutable_predict_init_net_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("caffe2.PredictorConsts.PREDICT_NET_TYPE");
        object = msg->mutable_predict_net_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("caffe2.PredictorConsts.SINGLE_PREDICTOR");
        object = msg->mutable_single_predictor();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("caffe2.PredictorConsts.MULTI_PREDICTOR");
        object = msg->mutable_multi_predictor();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE");
        object = msg->mutable_train_init_plan_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("caffe2.PredictorConsts.TRAIN_PLAN_TYPE");
        object = msg->mutable_train_plan_type();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PredictorConsts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.PredictorConsts)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meta_net_def()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->meta_net_def().data(), static_cast<int>(this->meta_net_def().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.META_NET_DEF");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predictor_dbreader()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->predictor_dbreader().data(), static_cast<int>(this->predictor_dbreader().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.PREDICTOR_DBREADER");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parameters_blob_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parameters_blob_type().data(), static_cast<int>(this->parameters_blob_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inputs_blob_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inputs_blob_type().data(), static_cast<int>(this->inputs_blob_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.INPUTS_BLOB_TYPE");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outputs_blob_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->outputs_blob_type().data(), static_cast<int>(this->outputs_blob_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_global_init_net_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->global_init_net_type().data(), static_cast<int>(this->global_init_net_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predict_init_net_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->predict_init_net_type().data(), static_cast<int>(this->predict_init_net_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predict_net_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->predict_net_type().data(), static_cast<int>(this->predict_net_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.PREDICT_NET_TYPE");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_single_predictor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->single_predictor().data(), static_cast<int>(this->single_predictor().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.SINGLE_PREDICTOR");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_multi_predictor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->multi_predictor().data(), static_cast<int>(this->multi_predictor().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.MULTI_PREDICTOR");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_train_init_plan_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->train_init_plan_type().data(), static_cast<int>(this->train_init_plan_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_train_plan_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->train_plan_type().data(), static_cast<int>(this->train_plan_type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.TRAIN_PLAN_TYPE");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.PredictorConsts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.PredictorConsts)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PredictorConsts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.PredictorConsts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meta_net_def().data(), static_cast<int>(this->meta_net_def().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.META_NET_DEF");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->meta_net_def(), output);
  }

  // optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predictor_dbreader().data(), static_cast<int>(this->predictor_dbreader().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.PREDICTOR_DBREADER");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->predictor_dbreader(), output);
  }

  // optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parameters_blob_type().data(), static_cast<int>(this->parameters_blob_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->parameters_blob_type(), output);
  }

  // optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inputs_blob_type().data(), static_cast<int>(this->inputs_blob_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.INPUTS_BLOB_TYPE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->inputs_blob_type(), output);
  }

  // optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->outputs_blob_type().data(), static_cast<int>(this->outputs_blob_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->outputs_blob_type(), output);
  }

  // optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->global_init_net_type().data(), static_cast<int>(this->global_init_net_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->global_init_net_type(), output);
  }

  // optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predict_init_net_type().data(), static_cast<int>(this->predict_init_net_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->predict_init_net_type(), output);
  }

  // optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predict_net_type().data(), static_cast<int>(this->predict_net_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.PREDICT_NET_TYPE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->predict_net_type(), output);
  }

  // optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->single_predictor().data(), static_cast<int>(this->single_predictor().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.SINGLE_PREDICTOR");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->single_predictor(), output);
  }

  // optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->multi_predictor().data(), static_cast<int>(this->multi_predictor().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.MULTI_PREDICTOR");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->multi_predictor(), output);
  }

  // optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_init_plan_type().data(), static_cast<int>(this->train_init_plan_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->train_init_plan_type(), output);
  }

  // optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_plan_type().data(), static_cast<int>(this->train_plan_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.TRAIN_PLAN_TYPE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->train_plan_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.PredictorConsts)
}

::google::protobuf::uint8* PredictorConsts::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.PredictorConsts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meta_net_def().data(), static_cast<int>(this->meta_net_def().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.META_NET_DEF");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->meta_net_def(), target);
  }

  // optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predictor_dbreader().data(), static_cast<int>(this->predictor_dbreader().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.PREDICTOR_DBREADER");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->predictor_dbreader(), target);
  }

  // optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parameters_blob_type().data(), static_cast<int>(this->parameters_blob_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parameters_blob_type(), target);
  }

  // optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inputs_blob_type().data(), static_cast<int>(this->inputs_blob_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.INPUTS_BLOB_TYPE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->inputs_blob_type(), target);
  }

  // optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->outputs_blob_type().data(), static_cast<int>(this->outputs_blob_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->outputs_blob_type(), target);
  }

  // optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->global_init_net_type().data(), static_cast<int>(this->global_init_net_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->global_init_net_type(), target);
  }

  // optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predict_init_net_type().data(), static_cast<int>(this->predict_init_net_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->predict_init_net_type(), target);
  }

  // optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predict_net_type().data(), static_cast<int>(this->predict_net_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.PREDICT_NET_TYPE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->predict_net_type(), target);
  }

  // optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->single_predictor().data(), static_cast<int>(this->single_predictor().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.SINGLE_PREDICTOR");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->single_predictor(), target);
  }

  // optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->multi_predictor().data(), static_cast<int>(this->multi_predictor().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.MULTI_PREDICTOR");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->multi_predictor(), target);
  }

  // optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_init_plan_type().data(), static_cast<int>(this->train_init_plan_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->train_init_plan_type(), target);
  }

  // optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_plan_type().data(), static_cast<int>(this->train_plan_type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.TRAIN_PLAN_TYPE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->train_plan_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.PredictorConsts)
  return target;
}

size_t PredictorConsts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.PredictorConsts)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meta_net_def());
    }

    // optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->predictor_dbreader());
    }

    // optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parameters_blob_type());
    }

    // optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inputs_blob_type());
    }

    // optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outputs_blob_type());
    }

    // optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->global_init_net_type());
    }

    // optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->predict_init_net_type());
    }

    // optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->predict_net_type());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->single_predictor());
    }

    // optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->multi_predictor());
    }

    // optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->train_init_plan_type());
    }

    // optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->train_plan_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredictorConsts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.PredictorConsts)
  GOOGLE_DCHECK_NE(&from, this);
  const PredictorConsts* source =
      ::google::protobuf::DynamicCastToGenerated<PredictorConsts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.PredictorConsts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.PredictorConsts)
    MergeFrom(*source);
  }
}

void PredictorConsts::MergeFrom(const PredictorConsts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.PredictorConsts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      meta_net_def_.AssignWithDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_meta_net_def_.get(), from.meta_net_def_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      predictor_dbreader_.AssignWithDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predictor_dbreader_.get(), from.predictor_dbreader_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      parameters_blob_type_.AssignWithDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_parameters_blob_type_.get(), from.parameters_blob_type_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      inputs_blob_type_.AssignWithDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_inputs_blob_type_.get(), from.inputs_blob_type_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      outputs_blob_type_.AssignWithDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_outputs_blob_type_.get(), from.outputs_blob_type_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      global_init_net_type_.AssignWithDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_global_init_net_type_.get(), from.global_init_net_type_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      predict_init_net_type_.AssignWithDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_init_net_type_.get(), from.predict_init_net_type_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      predict_net_type_.AssignWithDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_net_type_.get(), from.predict_net_type_);
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _has_bits_[0] |= 0x00000100u;
      single_predictor_.AssignWithDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_single_predictor_.get(), from.single_predictor_);
    }
    if (cached_has_bits & 0x00000200u) {
      _has_bits_[0] |= 0x00000200u;
      multi_predictor_.AssignWithDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_multi_predictor_.get(), from.multi_predictor_);
    }
    if (cached_has_bits & 0x00000400u) {
      _has_bits_[0] |= 0x00000400u;
      train_init_plan_type_.AssignWithDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_init_plan_type_.get(), from.train_init_plan_type_);
    }
    if (cached_has_bits & 0x00000800u) {
      _has_bits_[0] |= 0x00000800u;
      train_plan_type_.AssignWithDefault(&::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_plan_type_.get(), from.train_plan_type_);
    }
  }
}

void PredictorConsts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.PredictorConsts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictorConsts::CopyFrom(const PredictorConsts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.PredictorConsts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictorConsts::IsInitialized() const {
  return true;
}

void PredictorConsts::Swap(PredictorConsts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PredictorConsts::InternalSwap(PredictorConsts* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  meta_net_def_.Swap(&other->meta_net_def_, &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_meta_net_def_.get(),
    GetArenaNoVirtual());
  predictor_dbreader_.Swap(&other->predictor_dbreader_, &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predictor_dbreader_.get(),
    GetArenaNoVirtual());
  parameters_blob_type_.Swap(&other->parameters_blob_type_, &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_parameters_blob_type_.get(),
    GetArenaNoVirtual());
  inputs_blob_type_.Swap(&other->inputs_blob_type_, &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_inputs_blob_type_.get(),
    GetArenaNoVirtual());
  outputs_blob_type_.Swap(&other->outputs_blob_type_, &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_outputs_blob_type_.get(),
    GetArenaNoVirtual());
  global_init_net_type_.Swap(&other->global_init_net_type_, &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_global_init_net_type_.get(),
    GetArenaNoVirtual());
  predict_init_net_type_.Swap(&other->predict_init_net_type_, &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_init_net_type_.get(),
    GetArenaNoVirtual());
  predict_net_type_.Swap(&other->predict_net_type_, &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_predict_net_type_.get(),
    GetArenaNoVirtual());
  single_predictor_.Swap(&other->single_predictor_, &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_single_predictor_.get(),
    GetArenaNoVirtual());
  multi_predictor_.Swap(&other->multi_predictor_, &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_multi_predictor_.get(),
    GetArenaNoVirtual());
  train_init_plan_type_.Swap(&other->train_init_plan_type_, &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_init_plan_type_.get(),
    GetArenaNoVirtual());
  train_plan_type_.Swap(&other->train_plan_type_, &::caffe2::PredictorConsts::_i_give_permission_to_break_this_code_default_train_plan_type_.get(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata PredictorConsts::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_predictor_5fconsts_2eproto);
  return ::file_level_metadata_predictor_5fconsts_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace caffe2
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::caffe2::PredictorConsts* Arena::CreateMaybeMessage< ::caffe2::PredictorConsts >(Arena* arena) {
  return Arena::CreateInternal< ::caffe2::PredictorConsts >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
